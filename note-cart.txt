document.addEventListener("DOMContentLoaded", function () {
  // L·∫•y th√¥ng tin user t·ª´ localStorage
  const user = JSON.parse(localStorage.getItem("user")) || {};
  const cartKey = user.username ? `cart_${user.username}` : "cart_guest"; // Key gi·ªè h√†ng d·ª±a tr√™n username ho·∫∑c guest

  // Kh·ªüi t·∫°o icon gi·ªè h√†ng
  updateCartIcon(JSON.parse(localStorage.getItem(cartKey)) || []);

  // H√†m th√™m s·∫£n ph·∫©m v√†o gi·ªè
  function addToCart(product) {
    const cart = JSON.parse(localStorage.getItem(cartKey)) || [];
    const existing = cart.find((item) => item.name === product.name);

    if (existing) {
      existing.quantity += 1;
    } else {
      console.log("Adding product to cart:", product);
      cart.push({
        name: product.name,
        price: product.price,
        img: product.img,
        quantity: 1,
      });
    }

    localStorage.setItem(cartKey, JSON.stringify(cart));
    updateCartIcon(cart);
    showPopup(product);
  }

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng icon gi·ªè h√†ng
  function updateCartIcon(cart) {
    const total = cart.reduce((sum, p) => sum + p.quantity, 0);
    const cartCount = document.querySelector(".count-product-cart");
    if (cartCount) cartCount.textContent = total;
  }

  // Hi·ªÉn th·ªã popup
  function showPopup(product) {
    const cart = JSON.parse(localStorage.getItem(cartKey)) || [];
    const current = cart.find((p) => p.name === product.name);

    const popupImg = document.getElementById("popup-img");
    const popupName = document.getElementById("popup-name");
    const popupQty = document.getElementById("popup-quantity");
    const popupPrice = document.getElementById("popup-price");
    const popupTotalItems = document.getElementById("popup-cart-count");
    const popup = document.getElementById("popup-cart");

    if (
      popupImg &&
      popupName &&
      popupQty &&
      popupPrice &&
      popupTotalItems &&
      popup
    ) {
      popupImg.src = product.img;
      popupName.textContent = product.name;
      popupQty.textContent = current.quantity;
      popupPrice.textContent = product.price.toLocaleString() + "‚Ç´";
      popupTotalItems.textContent = cart.reduce((s, p) => s + p.quantity, 0);
      popup.classList.add("show");
      setTimeout(() => popup.classList.remove("show"), 3000);
    }
  }

  // Hi·ªÉn th·ªã popup gi·ªè h√†ng
  function showPopupCart(product) {
    const cart = JSON.parse(localStorage.getItem(cartKey)) || [];
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);

    const popupImg = document.getElementById("popup-img");
    const popupName = document.getElementById("popup-name");
    const popupQuantity = document.getElementById("popup-quantity");
    const popupPrice = document.getElementById("popup-price");
    const popupCartCount = document.getElementById("popup-cart-count");
    const popupCart = document.getElementById("popup-cart");
    const popupOverlay = document.getElementById("popup-overlay");

    if (
      popupImg &&
      popupName &&
      popupQuantity &&
      popupPrice &&
      popupCartCount &&
      popupCart &&
      popupOverlay
    ) {
      popupImg.src = product.img;
      popupName.textContent = product.name;
      popupQuantity.textContent = product.quantity;
      popupPrice.textContent = product.price.toLocaleString() + "‚Ç´";
      popupCartCount.textContent = totalItems;
      popupCart.style.display = "block";
      popupOverlay.style.display = "block";
    }
  }

  // ƒê√≥ng popup
  function closePopupCart() {
    const popupCart = document.getElementById("popup-cart");
    const popupOverlay = document.getElementById("popup-overlay");
    if (popupCart && popupOverlay) {
      popupCart.style.display = "none";
      popupOverlay.style.display = "none";
    }
  }

  // Render gi·ªè h√†ng
  function renderCart() {
    const cart = JSON.parse(localStorage.getItem(cartKey)) || [];
    const cartContainer = document.getElementById("cart-container");

    if (cartContainer) {
      if (cart.length === 0) {
        cartContainer.innerHTML = `
                <div class="empty-cart">
                    <img src="Images/empty-cart.png" alt="Gi·ªè h√†ng tr·ªëng" class="empty-cart-img" />
                    <p>Ch∆∞a c√≥ s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa b·∫°n.</p>
                    <a href="index.html"><button class="shop-now-btn">ƒê·∫∂T M√ìN NGAY</button></a>
                </div>
            `;
        return;
      }

      let cartHTML = `
            <div class="cart-container container" style="margin: 0px; padding: 0px;">
                <table class="cart-table">
                    <thead>
                        <tr>
                            <th>S·∫£n ph·∫©m</th>
                            <th>Th√¥ng tin s·∫£n ph·∫©m</th>
                            <th>ƒê∆°n gi√°</th>
                            <th>S·ªë l∆∞·ª£ng</th>
                            <th>Th√†nh ti·ªÅn</th>
                            <th>X√≥a</th>
                        </tr>
                    </thead>
                    <tbody id="cart-body">
        `;

      let total = 0;
      cart.forEach((product, index) => {
        console.log("Rendering product:", product.name, "Image:", product.img);
        const itemTotal = product.price * product.quantity;
        total += itemTotal;
        const imageSrc =
          product.image || product.img || "https://via.placeholder.com/100";

        cartHTML += `
                <tr>
                    <td><img src="${imageSrc}" alt="${
          product.name
        }" style="width: 70px; height: 70px;" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.name}</td>
                    <td><strong>${product.price.toLocaleString()}‚Ç´</strong></td>
                    <td>
                        <div class="quantity-control">
                            <button onclick="decreaseQty(${index})">-</button>
                            <span>${product.quantity}</span>
                            <button onclick="increaseQty(${index})">+</button>
                        </div>
                    </td>
                    <td><strong>${itemTotal.toLocaleString()}‚Ç´</strong></td>
                    <td><span class="delete-btn" onclick="removeItem(${index})">üóë</span></td>
                </tr>
            `;
      });

      cartHTML += `
                    </tbody>
                </table>
                <div class="cart-total" style="margin-top: 30px; text-align: right;">
                    T·ªïng ti·ªÅn: <span id="total-amount" style="font-weight: bold;">${total.toLocaleString()}‚Ç´</span>
                </div>
                <div class="cart-actions">
                    <a href="allproduct.html"><button class="btn-continue">Ti·∫øp t·ª•c mua h√†ng</button></a>
                    <a href="deliver.html"><button class="btn-checkout">Ti·∫øn h√†nh ƒë·∫∑t h√†ng</button></a>
                </div>
            </div>
        `;

      cartContainer.innerHTML = cartHTML;
    }
  }

  // TƒÉng s·ªë l∆∞·ª£ng
  window.increaseQty = function (index) {
    const cart = JSON.parse(localStorage.getItem(cartKey)) || [];
    cart[index].quantity += 1;
    localStorage.setItem(cartKey, JSON.stringify(cart));
    renderCart();
  };

  // Gi·∫£m s·ªë l∆∞·ª£ng
  window.decreaseQty = function (index) {
    const cart = JSON.parse(localStorage.getItem(cartKey)) || [];
    if (cart[index].quantity > 1) {
      cart[index].quantity -= 1;
    } else {
      cart.splice(index, 1);
    }
    localStorage.setItem(cartKey, JSON.stringify(cart));
    renderCart();
  };

  // X√≥a s·∫£n ph·∫©m
  window.removeItem = function (index) {
    const cart = JSON.parse(localStorage.getItem(cartKey)) || [];
    cart.splice(index, 1);
    localStorage.setItem(cartKey, JSON.stringify(cart));
    renderCart();
  };

  // Render ƒë∆°n h√†ng trong deliver.html
  function renderOrderReview() {
    const orderReviewDiv = document.getElementById("order-review-content");
    if (!orderReviewDiv) return;

    const cart = JSON.parse(localStorage.getItem(cartKey)) || [];
    if (cart.length === 0) {
      orderReviewDiv.innerHTML = "<p>Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong ƒë∆°n h√†ng.</p>";
      return;
    }

    let total = 0;
    let html = `
            <table class="review-table">
                <tbody>
        `;

    cart.forEach((product) => {
      const itemTotal = product.price * product.quantity;
      total += itemTotal;
      const imageSrc =
        product.image || product.img || "https://via.placeholder.com/100";
      html += `
                <tr>
                    <td>
                        <div class="review-item">
                            <img src="${imageSrc}" alt="${
        product.name
      }" class="review-img" onerror="this.src='https://via.placeholder.com/50';">
                            <span>${product.name}</span>
                        </div>
                    </td>
                    <td>${product.price.toLocaleString()}‚Ç´</td>
                    <td>${product.quantity}</td>
                    <td>${itemTotal.toLocaleString()}‚Ç´</td>
                </tr>
            `;
    });

    html += `
                </tbody>
            </table>
        `;

    orderReviewDiv.innerHTML = html;

    const shippingFee = 30000;
    document.getElementById("order-subtotal").textContent =
      total.toLocaleString() + "‚Ç´";
    document.getElementById("shipping-fee").textContent =
      shippingFee.toLocaleString() + "‚Ç´";
    document.getElementById("order-total").textContent =
      (total + shippingFee).toLocaleString() + "‚Ç´";
  }

  // G·ªçi renderOrderReview n·∫øu ·ªü deliver.html
  if (document.getElementById("order-review-content")) {
    renderOrderReview();
  }

  // X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t "ƒê·∫∑t h√†ng"
  const checkoutBtn = document.querySelector(".checkout-btn");
  if (checkoutBtn) {
    checkoutBtn.addEventListener("click", (e) => {
      e.preventDefault();
      handleCheckout();
    });
  }

  // H√†m x·ª≠ l√Ω thanh to√°n
  function handleCheckout() {
    const form = document.getElementById("form-deliver");
    const acceptPolicy = document.getElementById("accept");
    const cart = JSON.parse(localStorage.getItem(cartKey)) || [];

    if (cart.length === 0) {
      alert("Gi·ªè h√†ng tr·ªëng! Vui l√≤ng th√™m s·∫£n ph·∫©m tr∆∞·ªõc khi thanh to√°n.");
      return;
    }

    if (!form.checkValidity()) {
      form.reportValidity();
      return;
    }

    if (!acceptPolicy.checked) {
      alert("Vui l√≤ng ƒë·ªìng √Ω v·ªõi ch√≠nh s√°ch v·∫≠n chuy·ªÉn!");
      return;
    }

    const name = form.querySelector(
      'input[placeholder="Nh·∫≠p h·ªç v√† t√™n"]'
    ).value;
    const email = form.querySelector('input[type="email"]').value;
    const phone = form.querySelector('input[type="tel"]').value;
    const country = form.querySelector("select").value;
    const province = form.querySelector('select[name="province"]').value;
    const district = form.querySelector('select[name="district"]').value;
    const ward = document.querySelector('select[name="ward"]').value;
    const addressDetail = form.querySelector(
      'input[placeholder="S·ªë nh√†/ƒê∆∞·ªùng/Khu ph·ªë"]'
    ).value;

    const paymentMethod = document.querySelector(
      'input[name="payment"]:checked + img + span'
    ).textContent;

    const subtotal = cart.reduce(
      (sum, item) => sum + item.price * item.quantity,
      0
    );
    const shippingFee = 30000;
    const total = subtotal + shippingFee;

    const orderId = "TPBA" + Math.floor(100000 + Math.random() * 900000);
    const orderDate = new Date().toLocaleDateString("vi-VN", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });

    const order = {
      orderId,
      orderDate,
      customer: {
        name,
        email,
        phone,
        address: `${addressDetail}, ${ward}, ${district}, ${province}, ${country}`,
      },
      cart,
      subtotal,
      shippingFee,
      total,
      paymentMethod,
    };

    localStorage.setItem("lastOrder", JSON.stringify(order));
    localStorage.removeItem(cartKey); // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng
    window.location.href = "checkout.html";
  }

  // B·∫Øt s·ª± ki·ªán n√∫t "ƒê·∫∑t m√≥n" cho s·∫£n ph·∫©m tƒ©nh v√† ƒë·ªông
  function attachCartEvents() {
    document.querySelectorAll(".dat-mon").forEach((button) => {
      button.removeEventListener("click", handleAddToCart); // X√≥a s·ª± ki·ªán c≈© ƒë·ªÉ tr√°nh tr√πng l·∫∑p
      button.addEventListener("click", handleAddToCart);
    });
  }

  function handleAddToCart() {
    const productItem = this.closest(".product-item");
    const name = productItem.querySelector(".product-name").textContent;
    const priceText = productItem
      .querySelector(".product-price")
      .textContent.replace(/[^\d]/g, "");
    const price = parseInt(priceText);
    const img = productItem.querySelector(".product-photo").getAttribute("src");

    const product = { name, price, img };
    addToCart(product);
    showPopupCart(product);
  }

  // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t "ƒê·∫∑t m√≥n"
  attachCartEvents();

  // B·∫Øt s·ª± ki·ªán n√∫t "Th√™m v√†o gi·ªè h√†ng" (jQuery)
  if (typeof $ !== "undefined") {
    $(".add-to-cart")
      .off("click")
      .on("click", function () {
        const product = {
          name: $(this).data("name"),
          img: $(this).data("img"),
          price: Number($(this).data("price")),
        };
        addToCart(product);
        showPopupCart(product);
      });
  }

  // G·ªçi renderCart n·∫øu c√≥
  renderCart();

  // G·∫Øn s·ª± ki·ªán ƒë√≥ng popup
  const closePopupBtn = document.querySelector(".close-popup");
  if (closePopupBtn) {
    closePopupBtn.addEventListener("click", closePopupCart);
  }

  // Quan s√°t thay ƒë·ªïi trong product-list ƒë·ªÉ g·∫Øn l·∫°i s·ª± ki·ªán khi s·∫£n ph·∫©m ƒë·ªông ƒë∆∞·ª£c render
  const productList = document.getElementById("product-list");
  if (productList) {
    const observer = new MutationObserver(() => {
      attachCartEvents(); // G·∫Øn l·∫°i s·ª± ki·ªán khi DOM thay ƒë·ªïi
    });
    observer.observe(productList, { childList: true, subtree: true });
  }
});

// H√†m chuy·ªÉn h∆∞·ªõng checkout
function goToCheckout() {
  window.location.href = "deliver.html";
}

















// Render gi·ªè h√†ng
  function renderCart() {
    const cart = JSON.parse(localStorage.getItem(cartKey)) || [];
    const cartContainer = document.getElementById("cart-container");

    if (cartContainer) {
      if (cart.length === 0) {
        cartContainer.innerHTML = `
          <div class="empty-cart">
            <img src="Images/empty-cart.png" alt="Gi·ªè h√†ng tr·ªëng" class="empty-cart-img" />
            <p>Ch∆∞a c√≥ s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa b·∫°n.</p>
            <a href="index.html"><button class="shop-now-btn">ƒê·∫∂T M√ìN NGAY</button></a>
          </div>`;
        return;
      }

      let cartHTML = `
        <div class="cart-container">
          <div class="cart-header">
            <div class="header-item product-header">S·∫£n ph·∫©m</div>
            <div class="header-item price-header">ƒê∆°n gi√°</div>
            <div class="header-item qty-header">S·ªë l∆∞·ª£ng</div>
            <div class="header-item total-header">Th√†nh ti·ªÅn</div>
            <div class="header-item action-header">X√≥a</div>
          </div>
          <div class="cart-items">`;

      let total = 0;
      cart.forEach((product, index) => {
        const itemTotal = product.price * product.quantity;
        total += itemTotal;
        const imageSrc =
          product.image || product.img || "https://via.placeholder.com/100";

        cartHTML += `
          <div class="cart-item">
            <div class="product-col">
              <img src="${imageSrc}" alt="${product.name}" class="product-img">
              <div class="product-name">${product.name}</div>
            </div>
            <div class="price-col">${product.price.toLocaleString()}‚Ç´</div>
            <div class="qty-col">
              <div class="quantity-control">
                <button onclick="decreaseQty(${index})">-</button>
                <span>${product.quantity}</span>
                <button onclick="increaseQty(${index})">+</button>
              </div>
            </div>
            <div class="total-col">${itemTotal.toLocaleString()}‚Ç´</div>
            <div class="action-col">
              <button class="delete-btn" onclick="removeItem(${index})">üóë</button>
            </div>
          </div>`;
      });

      cartHTML += `
          </div>
          <div class="cart-footer">
            <div class="cart-total">
              <span>T·ªîNG TI·ªÄN</span>
              <span class="total-amount">${total.toLocaleString()}‚Ç´</span>
            </div>
            <div class="cart-actions">
              <a href="allproduct.html"><button class="btn-continue">Ti·∫øp t·ª•c mua h√†ng</button></a>
              <a href="deliver.html"><button class="btn-checkout">Ti·∫øn h√†nh ƒë·∫∑t h√†ng</button></a>
            </div>
          </div>
        </div>`;

      cartContainer.innerHTML = cartHTML;
    }
  }








  

  